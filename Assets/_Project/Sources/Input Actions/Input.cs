//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/_Project/Sources/Input Actions/Input.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input"",
    ""maps"": [
        {
            ""name"": ""Builder"",
            ""id"": ""af5054b9-6f79-4622-be63-25b870c9f3f7"",
            ""actions"": [
                {
                    ""name"": ""Accept"",
                    ""type"": ""Button"",
                    ""id"": ""6eca5e9c-caa2-43ba-a61f-4b4ec420401f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveCursor"",
                    ""type"": ""Value"",
                    ""id"": ""ac845e8e-6a4f-406c-a78a-e66f2457725a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""786f29c8-6ff3-48e5-bd71-91b1697a351c"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Accept"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""16cd6899-4a19-4174-ba50-7daf5ec48bec"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""MoveCursor"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Move"",
            ""id"": ""ab36ddb2-8c95-4292-a42d-785ef7b2f719"",
            ""actions"": [
                {
                    ""name"": ""Movement"",
                    ""type"": ""Value"",
                    ""id"": ""8a033919-c839-4f37-9121-a7205030db0d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Axis"",
                    ""id"": ""e660f660-0e08-4f9d-bea5-7f0df412b716"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c05bfedf-8dee-4d71-a222-787c7cb9096e"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""6b9bacf7-3847-47ad-9682-b8643c745737"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""7aff7dcc-b733-46f3-a3ad-939ef8d61cdc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cbc0436c-6c74-49da-a055-88c423690840"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Axis"",
                    ""id"": ""143cfa77-173d-49ba-b0ec-ed9150e8dda8"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""74376411-4050-4bf6-84f6-30c70b0d014f"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c671fd10-2daf-44ed-84bb-2982786c9d94"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""936ed6ef-3d10-4506-ac47-a13c617b1788"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""65ae9ba5-7a25-43b8-9d81-dd54cbf746eb"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Movement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Scaling"",
            ""id"": ""d1f6fbce-f0b8-48c2-89c9-4edf5ee5f70a"",
            ""actions"": [
                {
                    ""name"": ""Scroll"",
                    ""type"": ""Value"",
                    ""id"": ""2c725124-01d8-4ee8-839b-b499e511ca49"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Button"",
                    ""id"": ""436e9251-0174-4c1c-8232-f1327f0315e7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Decrease"",
                    ""type"": ""Button"",
                    ""id"": ""029b5387-ce4e-4389-a300-69b6669fafe8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Vector"",
                    ""id"": ""214b1c6a-a72e-467d-8c83-68282aaa883b"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""efbdc6c9-71b2-491f-87b4-a80984f5ee8d"",
                    ""path"": ""<Mouse>/scroll/down"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""6e4d4947-fda4-48c0-86c4-5f80ab5d0ad5"",
                    ""path"": ""<Mouse>/scroll/up"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Scroll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard One Modifier"",
                    ""id"": ""c9d8e4f4-5553-4fad-ba60-8c5e09401c9e"",
                    ""path"": ""ButtonWithOneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Zoom"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""594c5547-d065-43c4-b499-ab223fe922d5"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Button"",
                    ""id"": ""36f41392-fe52-4a5f-899b-d8c1e9f96d24"",
                    ""path"": ""<Keyboard>/equals"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Keyboard One Modifier"",
                    ""id"": ""695759e7-0afb-4eca-8fa0-ec246eaf544b"",
                    ""path"": ""ButtonWithOneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Decrease"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Modifier"",
                    ""id"": ""9faac2f9-abdc-4e5b-9faf-541fd0bec134"",
                    ""path"": ""<Keyboard>/ctrl"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Decrease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Button"",
                    ""id"": ""1aae3741-e8fc-4ab5-9349-3ee0d9b472b7"",
                    ""path"": ""<Keyboard>/minus"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Decrease"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""Rotation"",
            ""id"": ""0b7780c9-8ac8-45d0-a30a-c324605f98b7"",
            ""actions"": [
                {
                    ""name"": ""Horizontal Turn"",
                    ""type"": ""Value"",
                    ""id"": ""a3df30a5-116d-4f63-bf74-d9306eff5c3a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset Horizontal Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""1d07a436-326a-4739-9a9d-f522d25edb70"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Vertical Turn"",
                    ""type"": ""Value"",
                    ""id"": ""5d228aca-192e-4fb7-916d-0953a6f21eb2"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Reset Vertical Rotation"",
                    ""type"": ""Button"",
                    ""id"": ""37916841-ca3c-4569-8719-be7a85154566"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""9526aa80-c678-44c1-a95a-a82b0d8b2c3e"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Horizontal Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""ae22c16a-3afb-48d1-a208-9224b85987a3"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Horizontal Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""148568a0-1715-4e69-9997-072f7395337a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Horizontal Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""7a10c97a-ae94-484c-82e2-d7a401e18995"",
                    ""path"": ""<Keyboard>/home"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Reset Horizontal Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""d886ba49-b2b5-4de9-8fd0-4b9cd182f485"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Vertical Turn"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""6fc301b5-3e36-48a5-bf7d-8dc09717e47e"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Vertical Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""5faf19bf-3d0a-4edb-8745-976df9a0fa2f"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Mouse & Keyboard"",
                    ""action"": ""Vertical Turn"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ab3a56d2-3295-4336-b48d-5b2df5b981f7"",
                    ""path"": ""<Keyboard>/home"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reset Vertical Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Mouse & Keyboard"",
            ""bindingGroup"": ""Mouse & Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Builder
        m_Builder = asset.FindActionMap("Builder", throwIfNotFound: true);
        m_Builder_Accept = m_Builder.FindAction("Accept", throwIfNotFound: true);
        m_Builder_MoveCursor = m_Builder.FindAction("MoveCursor", throwIfNotFound: true);
        // Move
        m_Move = asset.FindActionMap("Move", throwIfNotFound: true);
        m_Move_Movement = m_Move.FindAction("Movement", throwIfNotFound: true);
        // Scaling
        m_Scaling = asset.FindActionMap("Scaling", throwIfNotFound: true);
        m_Scaling_Scroll = m_Scaling.FindAction("Scroll", throwIfNotFound: true);
        m_Scaling_Zoom = m_Scaling.FindAction("Zoom", throwIfNotFound: true);
        m_Scaling_Decrease = m_Scaling.FindAction("Decrease", throwIfNotFound: true);
        // Rotation
        m_Rotation = asset.FindActionMap("Rotation", throwIfNotFound: true);
        m_Rotation_HorizontalTurn = m_Rotation.FindAction("Horizontal Turn", throwIfNotFound: true);
        m_Rotation_ResetHorizontalRotation = m_Rotation.FindAction("Reset Horizontal Rotation", throwIfNotFound: true);
        m_Rotation_VerticalTurn = m_Rotation.FindAction("Vertical Turn", throwIfNotFound: true);
        m_Rotation_ResetVerticalRotation = m_Rotation.FindAction("Reset Vertical Rotation", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Builder
    private readonly InputActionMap m_Builder;
    private IBuilderActions m_BuilderActionsCallbackInterface;
    private readonly InputAction m_Builder_Accept;
    private readonly InputAction m_Builder_MoveCursor;
    public struct BuilderActions
    {
        private @Input m_Wrapper;
        public BuilderActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Accept => m_Wrapper.m_Builder_Accept;
        public InputAction @MoveCursor => m_Wrapper.m_Builder_MoveCursor;
        public InputActionMap Get() { return m_Wrapper.m_Builder; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuilderActions set) { return set.Get(); }
        public void SetCallbacks(IBuilderActions instance)
        {
            if (m_Wrapper.m_BuilderActionsCallbackInterface != null)
            {
                @Accept.started -= m_Wrapper.m_BuilderActionsCallbackInterface.OnAccept;
                @Accept.performed -= m_Wrapper.m_BuilderActionsCallbackInterface.OnAccept;
                @Accept.canceled -= m_Wrapper.m_BuilderActionsCallbackInterface.OnAccept;
                @MoveCursor.started -= m_Wrapper.m_BuilderActionsCallbackInterface.OnMoveCursor;
                @MoveCursor.performed -= m_Wrapper.m_BuilderActionsCallbackInterface.OnMoveCursor;
                @MoveCursor.canceled -= m_Wrapper.m_BuilderActionsCallbackInterface.OnMoveCursor;
            }
            m_Wrapper.m_BuilderActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Accept.started += instance.OnAccept;
                @Accept.performed += instance.OnAccept;
                @Accept.canceled += instance.OnAccept;
                @MoveCursor.started += instance.OnMoveCursor;
                @MoveCursor.performed += instance.OnMoveCursor;
                @MoveCursor.canceled += instance.OnMoveCursor;
            }
        }
    }
    public BuilderActions @Builder => new BuilderActions(this);

    // Move
    private readonly InputActionMap m_Move;
    private IMoveActions m_MoveActionsCallbackInterface;
    private readonly InputAction m_Move_Movement;
    public struct MoveActions
    {
        private @Input m_Wrapper;
        public MoveActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movement => m_Wrapper.m_Move_Movement;
        public InputActionMap Get() { return m_Wrapper.m_Move; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MoveActions set) { return set.Get(); }
        public void SetCallbacks(IMoveActions instance)
        {
            if (m_Wrapper.m_MoveActionsCallbackInterface != null)
            {
                @Movement.started -= m_Wrapper.m_MoveActionsCallbackInterface.OnMovement;
                @Movement.performed -= m_Wrapper.m_MoveActionsCallbackInterface.OnMovement;
                @Movement.canceled -= m_Wrapper.m_MoveActionsCallbackInterface.OnMovement;
            }
            m_Wrapper.m_MoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movement.started += instance.OnMovement;
                @Movement.performed += instance.OnMovement;
                @Movement.canceled += instance.OnMovement;
            }
        }
    }
    public MoveActions @Move => new MoveActions(this);

    // Scaling
    private readonly InputActionMap m_Scaling;
    private IScalingActions m_ScalingActionsCallbackInterface;
    private readonly InputAction m_Scaling_Scroll;
    private readonly InputAction m_Scaling_Zoom;
    private readonly InputAction m_Scaling_Decrease;
    public struct ScalingActions
    {
        private @Input m_Wrapper;
        public ScalingActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @Scroll => m_Wrapper.m_Scaling_Scroll;
        public InputAction @Zoom => m_Wrapper.m_Scaling_Zoom;
        public InputAction @Decrease => m_Wrapper.m_Scaling_Decrease;
        public InputActionMap Get() { return m_Wrapper.m_Scaling; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ScalingActions set) { return set.Get(); }
        public void SetCallbacks(IScalingActions instance)
        {
            if (m_Wrapper.m_ScalingActionsCallbackInterface != null)
            {
                @Scroll.started -= m_Wrapper.m_ScalingActionsCallbackInterface.OnScroll;
                @Scroll.performed -= m_Wrapper.m_ScalingActionsCallbackInterface.OnScroll;
                @Scroll.canceled -= m_Wrapper.m_ScalingActionsCallbackInterface.OnScroll;
                @Zoom.started -= m_Wrapper.m_ScalingActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_ScalingActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_ScalingActionsCallbackInterface.OnZoom;
                @Decrease.started -= m_Wrapper.m_ScalingActionsCallbackInterface.OnDecrease;
                @Decrease.performed -= m_Wrapper.m_ScalingActionsCallbackInterface.OnDecrease;
                @Decrease.canceled -= m_Wrapper.m_ScalingActionsCallbackInterface.OnDecrease;
            }
            m_Wrapper.m_ScalingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Scroll.started += instance.OnScroll;
                @Scroll.performed += instance.OnScroll;
                @Scroll.canceled += instance.OnScroll;
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @Decrease.started += instance.OnDecrease;
                @Decrease.performed += instance.OnDecrease;
                @Decrease.canceled += instance.OnDecrease;
            }
        }
    }
    public ScalingActions @Scaling => new ScalingActions(this);

    // Rotation
    private readonly InputActionMap m_Rotation;
    private IRotationActions m_RotationActionsCallbackInterface;
    private readonly InputAction m_Rotation_HorizontalTurn;
    private readonly InputAction m_Rotation_ResetHorizontalRotation;
    private readonly InputAction m_Rotation_VerticalTurn;
    private readonly InputAction m_Rotation_ResetVerticalRotation;
    public struct RotationActions
    {
        private @Input m_Wrapper;
        public RotationActions(@Input wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalTurn => m_Wrapper.m_Rotation_HorizontalTurn;
        public InputAction @ResetHorizontalRotation => m_Wrapper.m_Rotation_ResetHorizontalRotation;
        public InputAction @VerticalTurn => m_Wrapper.m_Rotation_VerticalTurn;
        public InputAction @ResetVerticalRotation => m_Wrapper.m_Rotation_ResetVerticalRotation;
        public InputActionMap Get() { return m_Wrapper.m_Rotation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(RotationActions set) { return set.Get(); }
        public void SetCallbacks(IRotationActions instance)
        {
            if (m_Wrapper.m_RotationActionsCallbackInterface != null)
            {
                @HorizontalTurn.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnHorizontalTurn;
                @HorizontalTurn.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnHorizontalTurn;
                @HorizontalTurn.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnHorizontalTurn;
                @ResetHorizontalRotation.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnResetHorizontalRotation;
                @ResetHorizontalRotation.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnResetHorizontalRotation;
                @ResetHorizontalRotation.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnResetHorizontalRotation;
                @VerticalTurn.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnVerticalTurn;
                @VerticalTurn.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnVerticalTurn;
                @VerticalTurn.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnVerticalTurn;
                @ResetVerticalRotation.started -= m_Wrapper.m_RotationActionsCallbackInterface.OnResetVerticalRotation;
                @ResetVerticalRotation.performed -= m_Wrapper.m_RotationActionsCallbackInterface.OnResetVerticalRotation;
                @ResetVerticalRotation.canceled -= m_Wrapper.m_RotationActionsCallbackInterface.OnResetVerticalRotation;
            }
            m_Wrapper.m_RotationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorizontalTurn.started += instance.OnHorizontalTurn;
                @HorizontalTurn.performed += instance.OnHorizontalTurn;
                @HorizontalTurn.canceled += instance.OnHorizontalTurn;
                @ResetHorizontalRotation.started += instance.OnResetHorizontalRotation;
                @ResetHorizontalRotation.performed += instance.OnResetHorizontalRotation;
                @ResetHorizontalRotation.canceled += instance.OnResetHorizontalRotation;
                @VerticalTurn.started += instance.OnVerticalTurn;
                @VerticalTurn.performed += instance.OnVerticalTurn;
                @VerticalTurn.canceled += instance.OnVerticalTurn;
                @ResetVerticalRotation.started += instance.OnResetVerticalRotation;
                @ResetVerticalRotation.performed += instance.OnResetVerticalRotation;
                @ResetVerticalRotation.canceled += instance.OnResetVerticalRotation;
            }
        }
    }
    public RotationActions @Rotation => new RotationActions(this);
    private int m_MouseKeyboardSchemeIndex = -1;
    public InputControlScheme MouseKeyboardScheme
    {
        get
        {
            if (m_MouseKeyboardSchemeIndex == -1) m_MouseKeyboardSchemeIndex = asset.FindControlSchemeIndex("Mouse & Keyboard");
            return asset.controlSchemes[m_MouseKeyboardSchemeIndex];
        }
    }
    public interface IBuilderActions
    {
        void OnAccept(InputAction.CallbackContext context);
        void OnMoveCursor(InputAction.CallbackContext context);
    }
    public interface IMoveActions
    {
        void OnMovement(InputAction.CallbackContext context);
    }
    public interface IScalingActions
    {
        void OnScroll(InputAction.CallbackContext context);
        void OnZoom(InputAction.CallbackContext context);
        void OnDecrease(InputAction.CallbackContext context);
    }
    public interface IRotationActions
    {
        void OnHorizontalTurn(InputAction.CallbackContext context);
        void OnResetHorizontalRotation(InputAction.CallbackContext context);
        void OnVerticalTurn(InputAction.CallbackContext context);
        void OnResetVerticalRotation(InputAction.CallbackContext context);
    }
}
